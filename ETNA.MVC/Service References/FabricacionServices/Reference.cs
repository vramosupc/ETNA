//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.34209
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ETNA.MVC.FabricacionServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoteDto", Namespace="http://schemas.datacontract.org/2004/07/ETNA.DTOs.FB")]
    [System.SerializableAttribute()]
    public partial class LoteDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescripcionTipoLoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FechaCreacionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NroLoteField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DescripcionTipoLote {
            get {
                return this.DescripcionTipoLoteField;
            }
            set {
                if ((object.ReferenceEquals(this.DescripcionTipoLoteField, value) != true)) {
                    this.DescripcionTipoLoteField = value;
                    this.RaisePropertyChanged("DescripcionTipoLote");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FechaCreacion {
            get {
                return this.FechaCreacionField;
            }
            set {
                if ((this.FechaCreacionField.Equals(value) != true)) {
                    this.FechaCreacionField = value;
                    this.RaisePropertyChanged("FechaCreacion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NroLote {
            get {
                return this.NroLoteField;
            }
            set {
                if ((object.ReferenceEquals(this.NroLoteField, value) != true)) {
                    this.NroLoteField = value;
                    this.RaisePropertyChanged("NroLote");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FabricacionServices.ILotesService")]
    public interface ILotesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotesService/InsertarLote", ReplyAction="http://tempuri.org/ILotesService/InsertarLoteResponse")]
        int InsertarLote(string nroLote, int idTipoLote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotesService/InsertarLote", ReplyAction="http://tempuri.org/ILotesService/InsertarLoteResponse")]
        System.Threading.Tasks.Task<int> InsertarLoteAsync(string nroLote, int idTipoLote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotesService/EditarLote", ReplyAction="http://tempuri.org/ILotesService/EditarLoteResponse")]
        bool EditarLote(int idLote, string nroLote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotesService/EditarLote", ReplyAction="http://tempuri.org/ILotesService/EditarLoteResponse")]
        System.Threading.Tasks.Task<bool> EditarLoteAsync(int idLote, string nroLote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotesService/EliminarLote", ReplyAction="http://tempuri.org/ILotesService/EliminarLoteResponse")]
        bool EliminarLote(int idLote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotesService/EliminarLote", ReplyAction="http://tempuri.org/ILotesService/EliminarLoteResponse")]
        System.Threading.Tasks.Task<bool> EliminarLoteAsync(int idLote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotesService/ListaLotes", ReplyAction="http://tempuri.org/ILotesService/ListaLotesResponse")]
        ETNA.MVC.FabricacionServices.LoteDto[] ListaLotes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILotesService/ListaLotes", ReplyAction="http://tempuri.org/ILotesService/ListaLotesResponse")]
        System.Threading.Tasks.Task<ETNA.MVC.FabricacionServices.LoteDto[]> ListaLotesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILotesServiceChannel : ETNA.MVC.FabricacionServices.ILotesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LotesServiceClient : System.ServiceModel.ClientBase<ETNA.MVC.FabricacionServices.ILotesService>, ETNA.MVC.FabricacionServices.ILotesService {
        
        public LotesServiceClient() {
        }
        
        public LotesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LotesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LotesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LotesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int InsertarLote(string nroLote, int idTipoLote) {
            return base.Channel.InsertarLote(nroLote, idTipoLote);
        }
        
        public System.Threading.Tasks.Task<int> InsertarLoteAsync(string nroLote, int idTipoLote) {
            return base.Channel.InsertarLoteAsync(nroLote, idTipoLote);
        }
        
        public bool EditarLote(int idLote, string nroLote) {
            return base.Channel.EditarLote(idLote, nroLote);
        }
        
        public System.Threading.Tasks.Task<bool> EditarLoteAsync(int idLote, string nroLote) {
            return base.Channel.EditarLoteAsync(idLote, nroLote);
        }
        
        public bool EliminarLote(int idLote) {
            return base.Channel.EliminarLote(idLote);
        }
        
        public System.Threading.Tasks.Task<bool> EliminarLoteAsync(int idLote) {
            return base.Channel.EliminarLoteAsync(idLote);
        }
        
        public ETNA.MVC.FabricacionServices.LoteDto[] ListaLotes() {
            return base.Channel.ListaLotes();
        }
        
        public System.Threading.Tasks.Task<ETNA.MVC.FabricacionServices.LoteDto[]> ListaLotesAsync() {
            return base.Channel.ListaLotesAsync();
        }
    }
}
